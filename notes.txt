Prework:

minikube ssh
docker pull docker.io/centos/postgresql-96-centos7:9.6
docker pull aliok/postgres-operator
docker pull postgres:9.6
exit
minikube dashboard
rm -rf $HOME/go/src/github.com/aliok/postgres-operator

=======================================

# create project

# NO NEED export GOROOT=/usr/lib/golang
export GO111MODULE=on
cd $HOME/go/src/github.com/aliok
operator-sdk new postgres-operator
cd postgres-operator


==========================================

# create API
operator-sdk add api --api-version=example.com/v1alpha1 --kind=Postgresql
idea .

# -- change stuff in the spec and status

// Instances specify the number of instances that this Postgres cluster will have
Instances int32 `json:"instances"`

# Regenerate yaml
operator-sdk generate openapi


# apply the CRD
kubectl apply -f deploy/crds/example_v1alpha1_postgresql_crd.yaml

# update example_v1alpha1_postgresql_cr.yaml

kubectl apply -f deploy/crds/example_v1alpha1_postgresql_cr.yaml
kubectl get postgresqls
kubectl delete postgresql example-postgresql

==========================================

# create controller
operator-sdk add controller --api-version=example.com/v1alpha1 --kind=Postgresql

# Coding!
# 1. create Postgres deployment
# 2. register and watch deployment
# 3. reconcile deployment replicas

manager:
-------------
if err := appsv1.AddToScheme(mgr.GetScheme()); err != nil {
    log.Error(err, "")
    os.Exit(1)
}
-------------


controller:
-------------
postgresqlDeployment:= newPostgresqlDeployment(instance)

// Set UnifiedPushServer instance as the owner and controller
if err := controllerutil.SetControllerReference(instance, postgresqlDeployment, r.scheme); err != nil {
    return reconcile.Result{}, err
}

// Check if this Deployment already exists
foundPostgresqlDeployment := &appsv1.Deployment{}
err = r.client.Get(context.TODO(), types.NamespacedName{Name: postgresqlDeployment.Name, Namespace: postgresqlDeployment.Namespace}, foundPostgresqlDeployment)
if err != nil && errors.IsNotFound(err) {
    reqLogger.Info("Creating a new Deployment", "Deployment.Namespace", postgresqlDeployment.Namespace, "Deployment.Name", postgresqlDeployment.Name)
    err = r.client.Create(context.TODO(), postgresqlDeployment)
    if err != nil {
        return reconcile.Result{}, err
    }
} else if err != nil {
    return reconcile.Result{}, err
} else {
    if foundPostgresqlDeployment.Spec.Replicas != &instance.Spec.Instances {
        foundPostgresqlDeployment.Spec.Replicas = &instance.Spec.Instances

        // enqueue
        err = r.client.Update(context.TODO(), foundPostgresqlDeployment)
        if err != nil {
            reqLogger.Error(err, "Failed to update Deployment", "Deployment.Namespace", foundPostgresqlDeployment.Namespace, "Deployment.Name", foundPostgresqlDeployment.Name)
            return reconcile.Result{}, err
        }
        return reconcile.Result{Requeue: true}, nil
    }
}

return reconcile.Result{}, nil
-------------

-------------
func newPostgresqlDeployment(cr *examplev1alpha1.Postgresql) *appsv1.Deployment {
	return &appsv1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name:      cr.Name + "-deployment",
			Namespace: cr.Namespace,
		},
		Spec: appsv1.DeploymentSpec{
			Replicas: &cr.Spec.Instances, 		// HERE!
			Selector: &metav1.LabelSelector{
				MatchLabels: map[string]string{
					"app": cr.Name,
				},
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{
						"app": cr.Name,
					},
				},
				Spec: corev1.PodSpec{
					Containers: []corev1.Container{
						{
							Name:            "postgres",
							Image:           "postgres:9.6",
						},
					},
				},
			},
		},
	}
}
-------------

-------------
// Watch for changes to secondary resource Deployment and requeue the owner Postgresql
err = c.Watch(&source.Kind{Type: &appsv1.Deployment{}}, &handler.EnqueueRequestForOwner{
    IsController: true,
    OwnerType:    &examplev1alpha1.Postgresql{},
})
if err != nil {
    return err
}
-------------



==========================================

# Build and push the operator
operator-sdk build aliok/postgres-operator
docker push aliok/postgres-operator

# Deploy the operator
sed -i 's|REPLACE_IMAGE|aliok/postgres-operator|g' deploy/operator.yaml

kubectl create -f deploy/service_account.yaml
kubectl create -f deploy/role.yaml
kubectl create -f deploy/role_binding.yaml
kubectl create -f deploy/crds/app.example.com_appservices_crd.yaml
kubectl create -f deploy/operator.yaml

==========================================

# Play around
# 1. Create a CR
# 2. See it getting up
# 3. Check the deployment
# 4. Delete the deployment
# 5. Change the instance count in CR

==========================================

# local debug
# 1. Undeploy the operator
# 2. Run out of the cluster
# 3. Set a breakpoint


=========================

operator-sdk generate k8s
